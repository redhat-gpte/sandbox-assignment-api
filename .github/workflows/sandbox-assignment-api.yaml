---
name: sandbox_assignment-api
on:
  push:
    branches-ignore:
    - '*'
    tags:
    - 'sandbox-assignment-api-v[0-9]*'
jobs:
  publish:
    env:
      CONTEXT_DIR: sandbox_assignment/api
      IMAGE_NAME: open-cloud-access-sandbox-assignment-api
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source
      uses: actions/checkout@master

    - name: Get image tags
      id: image_tags
      run: |
        # Version is a semantic version tag or semantic version with release number
        # Ex: sandbox-assignment-api-v0.1.0, sandbox-assignment-api-v0.1.0-1
        RELEASE=${GITHUB_REF#refs/tags/sandbox-assignment-api-}
        VERSION=${RELEASE/-*/}
        echo "::set-output name=RELEASE::${RELEASE}"
        echo "::set-output name=VERSION::${VERSION}"

        # Only build image if version tag without release number
        if [[ "${VERSION}" == "${RELEASE}" ]]; then
          # Publish to latest, minor, and patch tags
          IMAGE_TAGS=(
            '${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.IMAGE_NAME }}:latest'
            "${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.IMAGE_NAME }}:${VERSION}"
            "${{ secrets.REGISTRY_URI }}/${{ secrets.REGISTRY_REPOSITORY }}/${{ env.IMAGE_NAME }}:${VERSION%.*}"
          )
          # Set IMAGE_TAGS output for use in next step
          ( IFS=$','; echo "::set-output name=IMAGE_TAGS::${IMAGE_TAGS[*]}" )
        fi

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      if: steps.image_tags.outputs.IMAGE_TAGS

    - name: Login to Image Registry
      uses: docker/login-action@v1
      if: steps.image_tags.outputs.IMAGE_TAGS
      with:
        registry: ${{ secrets.REGISTRY_URI }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build and publish image to Quay
      uses: docker/build-push-action@v2
      if: steps.image_tags.outputs.IMAGE_TAGS
      with:
        context: ${{ env.CONTEXT_DIR }}
        file: ${{ env.CONTEXT_DIR }}/Dockerfile
        push: true
        tags: ${{ steps.image_tags.outputs.IMAGE_TAGS }}
